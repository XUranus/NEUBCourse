<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.MIME.Markup
</name>
</assembly>
<members>
<member name="T:Microsoft.VisualBasic.MIME.Markup.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Stroke">
 <summary>
 ```css
 stroke: color/image; stroke-width: width(px); stroke-dash: dash_style;
 ```
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont">
 <summary>
 ```CSS
 font-style: style; font-size: size; font-family: Name;
 ```
 
 这个简写属性用于一次设置元素字体的两个或更多方面。使用 ``icon`` 等关键字可以适当地设置元素的字体，使之与用户计算机环境中的某个方面一致。
 注意，如果没有使用这些关键词，至少要指定字体大小和字体系列。
 可以按顺序设置如下属性：

 + font-style
 + font-variant
 + font-weight
 + font-size/line-height
 + font-family

 可以不设置其中的某个值，比如 ``font:100% verdana;`` 也是允许的。未设置的属性会使用其默认值。
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.style">
 <summary>
 The System.Drawing.FontStyle of the new font.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.family">
 <summary>
 A string representation of the System.Drawing.FontFamily for the new System.Drawing.Font.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.GDIObject">
 <summary>
 Initializes a new <see cref="T:System.Drawing.Font"/> using a specified size and style.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.TryParse(System.String,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont)">
 <summary>
 Parsing font style data from the css expression string.
 </summary>
 <param name="css"></param>
 <param name="[default]">On failure return this default value</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.CSSFont.ToString">
 <summary>
 To CSS style text
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding">
 <summary>
 Represents padding or margin information associated with a gdi element. (padding: top, right, bottom, left)
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.#ctor(System.Int32[])">
 <summary>
 
 </summary>
 <param name="layoutVector%"><see cref="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.LayoutVector"/></param>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.Horizontal">
 <summary>
 Gets the combined padding for the right and left edges.
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.Vertical">
 <summary>
 Gets the combined padding for the top and bottom edges.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.ToString">
 <summary>
 padding: top, right, bottom, left
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.LayoutVector">
 <summary>
 padding: top, right, bottom, left
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.op_Explicit(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding)~System.String">
 <summary>
 转换为css字符串
 </summary>
 <param name="padding"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding.op_Implicit(System.String)~Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Padding">
 <summary>
 同时兼容padding css，以及使用size表达式统一赋值
 </summary>
 <param name="css$"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssAnonymousBlockBox">
 <summary>
 Represents an anonymous block box
 </summary>
 <remarks>
 To learn more about anonymous block boxes visit CSS spec:
 http://www.w3.org/TR/CSS21/visuren.html#anonymous-block-level
 </remarks>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssAnonymousSpaceBlockBox">
 <summary>
 Represents an AnonymousBlockBox which contains only blank spaces
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssAnonymousBox">
 <summary>
 Represents an anonymous inline box
 </summary>
 <remarks>
 To learn more about anonymous inline boxes visit:
 http://www.w3.org/TR/CSS21/visuren.html#anonymous
 </remarks>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssAnonymousSpaceBox">
 <summary>
 Represents an anonymous inline box which contains nothing but blank spaces
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock">
 <summary>
 Represents a block of CSS property values
 </summary>
 <remarks>
 To learn more about CSS blocks visit CSS spec:
 http://www.w3.org/TR/CSS21/syndata.html#block
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock.#ctor">
 <summary>
 Initializes internal's
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock.#ctor(System.String)">
 <summary>
 Creates a new block from the block's source
 </summary>
 <param name="blockSource"></param>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock.Properties">
 <summary>
 Gets the properties and its values
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock.PropertyValues">
 <summary>
 Gets the dictionary with property-ready values
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock.BlockSource">
 <summary>
 Gets the block's source
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock.UpdatePropertyValues">
 <summary>
 Updates the PropertyValues dictionary
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBlock.AssignTo(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Asigns the style on this block o the specified box
 </summary>
 <param name="b"></param>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox">
 <summary>
 Represents a CSS Box of text or replaced elements.
 </summary>
 <remarks>
 The Box can contains other boxes, that's the way that the CSS Tree
 is composed.
 
 To know more about boxes visit CSS spec:
 http://www.w3.org/TR/CSS21/box.html
 </remarks>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Empty">
 <summary>
 An empty box with empty values.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox._properties">
 <summary>
 Table of 'css-property' => .NET property
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox._defaults">
 <summary>
 Dictionary of default values
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox._inheritables">
 <summary>
 Hosts all inhertiable properties
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox._cssproperties">
 <summary>
 Hosts css properties
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.#cctor">
 <summary>
 Static constructor and initialization
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetDefaultValue(System.Reflection.PropertyInfo)">
 <summary>
 Gets the default value of the specified css property
 </summary>
 <param name="prop"></param>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.TableFixed">
 <summary>
 Do not use or alter this flag
 </summary>
 <remarks>
 Flag that indicates that CssTable algorithm already made fixes on it.
 </remarks>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualPaddingTop">
 <summary>
 Gets the actual top's padding
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualPaddingLeft">
 <summary>
 Gets the actual padding on the left
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualPaddingBottom">
 <summary>
 Gets the actual Padding of the bottom
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualPaddingRight">
 <summary>
 Gets the actual padding on the right
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualMarginTop">
 <summary>
 Gets the actual top's Margin
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualMarginLeft">
 <summary>
 Gets the actual Margin on the left
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualMarginBottom">
 <summary>
 Gets the actual Margin of the bottom
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualMarginRight">
 <summary>
 Gets the actual Margin on the right
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderTopWidth">
 <summary>
 Gets the actual top border width
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderLeftWidth">
 <summary>
 Gets the actual Left border width
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderBottomWidth">
 <summary>
 Gets the actual Bottom border width
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderRightWidth">
 <summary>
 Gets the actual Right border width
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderTopColor">
 <summary>
 Gets the actual top border Color
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderLeftColor">
 <summary>
 Gets the actual Left border Color
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderBottomColor">
 <summary>
 Gets the actual Bottom border Color
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderRightColor">
 <summary>
 Gets the actual Right border Color
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualCornerNW">
 <summary>
 Gets the actual lenght of the north west corner
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualCornerNE">
 <summary>
 Gets the actual lenght of the north east corner
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualCornerSE">
 <summary>
 Gets the actual lenght of the south east corner
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualCornerSW">
 <summary>
 Gets the actual lenght of the south west corner
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualWordSpacing">
 <summary>
 Gets the actual word spacing of the word.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualColor">
 <summary>
 
 Gets the actual color for the text.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBackgroundColor">
 <summary>
 Gets the actual background color of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBackgroundGradient">
 <summary>
 Gets the second color that creates a gradient for the background
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBackgroundGradientAngle">
 <summary>
 Gets the actual angle specified for the background gradient
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualParentFont">
 <summary>
 Gets the actual font of the parent
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualFont">
 <summary>
 Gets the font that should be actually used to paint the text of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualTextIndent">
 <summary>
 Gets the text indentation (on first line only)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderSpacingHorizontal">
 <summary>
 Gets the actual horizontal border spacing for tables
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBorderSpacingVertical">
 <summary>
 Gets the actual vertical border spacing for tables
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ListItemBox">
 <summary>
 Gets the • box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.AvailableWidth">
 <summary>
 Gets the width available on the box, counting padding and margin.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Bounds">
 <summary>
 Gets the bounds of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualBottom">
 <summary>
 Gets or sets the bottom of the box. 
 (When setting, alters only the Size.Height of the box)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Boxes">
 <summary>
 Gets the childrenn boxes of this box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ClientLeft">
 <summary>
 Gets the left of the client rectangle (Where content starts rendering)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ClientTop">
 <summary>
 Gets the top of the client rectangle (Where content starts rendering)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ClientRight">
 <summary>
 Gets the right of the client rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ClientBottom">
 <summary>
 Gets the bottom of the client rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ClientRectangle">
 <summary>
 Gets the client rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ContainingBlock">
 <summary>
 Gets the containing block-box of this box. (The nearest parent box with display=block)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.FontAscent">
 <summary>
 Gets the font's ascent
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.FontLineSpacing">
 <summary>
 Gets the font's line spacing
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.FontDescent">
 <summary>
 Gets the font's descent
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.FirstWord">
 <summary>
 Gets the first word of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.FirstHostingLineBox">
 <summary>
 Gets or sets the first linebox where content of this box appear
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.LastHostingLineBox">
 <summary>
 Gets or sets the last linebox where content of this box appear
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.HtmlTag">
 <summary>
 Gets the HTMLTag that hosts this box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.InitialContainer">
 <summary>
 Gets the InitialContainer of the Box.
 WARNING: May be null.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.IsImage">
 <summary>
 Gets if this box represents an image
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.IsRounded">
 <summary>
 Gets a value indicating if at least one of the corners of the box is rounded
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.IsSpaceOrEmpty">
 <summary>
 Tells if the box is empty or contains just blank spaces
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.LastWord">
 <summary>
 Gets the last word of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.LineBoxes">
 <summary>
 Gets the line-boxes of this box (if block box)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Location">
 <summary>
 Gets or sets the location of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ParentBox">
 <summary>
 Gets or sets the parent box of this box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ParentLineBoxes">
 <summary>
 Gets the linebox(es) that contains words of this box (if inline)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Rectangles">
 <summary>
 Gets the rectangles where this box should be painted
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ActualRight">
 <summary>
 Gets the right of the box. When setting, it will affect only the width of the box.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Size">
 <summary>
 Gets or sets the size of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Text">
 <summary>
 Gets or sets the inner text of the box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Words">
 <summary>
 Gets the BoxWords of text in the box
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.SetInitialContainer(Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer)">
 <summary>
 Sets the initial container of the box
 </summary>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ContainsInlinesOnly">
 <summary>
 Returns false if some of the boxes
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetIndexForList">
 <summary>
 Gets the index of the box to be used on a (ordered) list
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.CreateListItemBox(System.Drawing.Graphics)">
 <summary>
 Creates the <see cref="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ListItemBox"/>
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.FirstWordOccourence(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Searches for the first word occourence inside the box, on the specified linebox
 </summary>
 <param name="b"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetAttribute(System.String)">
 <summary>
 Gets the specified Attribute, returns string.Empty if no attribute specified
 </summary>
 <param name="attribute">Attribute to retrieve</param>
 <returns>Attribute value or string.Empty if no attribute specified</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetAttribute(System.String,System.String)">
 <summary>
 Gets the value of the specified attribute of the source HTML tag.
 </summary>
 <param name="attribute">Attribute to retrieve</param>
 <param name="defaultValue">Value to return if attribute is not specified</param>
 <returns>Attribute value or defaultValue if no attribute specified</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetEmHeight">
 <summary>
 Gets the height of the font in the specified units
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetPreviousSibling(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the previous sibling of this box.
 </summary>
 <returns>Box before this one on the tree. Null if its the first</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetMinimumWidth">
 <summary>
 Gets the minimum width that the box can be.
 The box can be as thin as the longest word plus padding.
 The check is deep thru box tree.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetMinimumWidth_BubblePadding(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Single@)">
 <summary>
 Bubbles up the padding from the starting box
 </summary>
 <param name="box"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetMinimumWidth_LongestWord(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Single@,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord@)">
 <summary>
 Gets the longest word (in width) inside the box, deeply.
 </summary>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetMaximumBottom(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Single)">
 <summary>
 Gets the maximum bottom of the boxes inside the startBox
 </summary>
 <param name="startBox"></param>
 <param name="currentMaxBottom"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetFullWidth(System.Drawing.Graphics)">
 <summary>
 Get the width of the box at full width (No line breaks)
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetFullWidth_WordsWith(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Drawing.Graphics,System.Single@,System.Single@)">
 <summary>
 Gets the longest word (in width) inside the box, deeply.
 </summary>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.GetNextSibling">
 <summary>
 Gets the next sibling of this box.
 </summary>
 <returns>Box after this one on the tree. Null if its the last one.</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.HasJustInlineSiblings">
 <summary>
 Gets if this box has only inline siblings (including itself)
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.InheritStyle">
 <summary>
 Inherits inheritable values from parent.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.InheritStyle(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Boolean)">
 <summary>
 Inherits inheritable values from specified box.
 </summary>
 <param name="everything">Set to true to inherit all CSS properties instead of only the ineritables</param>
 <param name="godfather">Box to inherit the properties</param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.MarginCollapse(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the result of collapsing the vertical margins of the two boxes
 </summary>
 <param name="a">Superior box (checks for margin-bottom)</param>
 <param name="b">Inferior box (checks for margin-top)</param>
 <returns>Maximum of margins</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.MeasureBounds(System.Drawing.Graphics)">
 <summary>
 Measures the bounds of box and children, recursively.
 </summary>
 <param name="g">Device context to draw</param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.MeasureWordSpacing(System.Drawing.Graphics)">
 <summary>
 Measures the word spacing
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.MeasureWordsSize(System.Drawing.Graphics)">
 <summary>
 Assigns words its width and height
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.NoEms(System.String)">
 <summary>
 Ensures that the specified length is converted to pixels if necessary
 </summary>
 <param name="length"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.OffsetTop(System.Single)">
 <summary>
 Deeply offsets the top of the box and its contents
 </summary>
 <param name="amount"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Paint(System.Drawing.Graphics)">
 <summary>
 Paints the fragment
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.PaintBorder(System.Drawing.Graphics,System.Drawing.RectangleF,System.Boolean,System.Boolean)">
 <summary>
 Paints the border of the box
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.PaintBackground(System.Drawing.Graphics,System.Drawing.RectangleF)">
 <summary>
 Paints the background of the box
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.PaintDecoration(System.Drawing.Graphics,System.Drawing.RectangleF,System.Boolean,System.Boolean)">
 <summary>
 Paints the text decoration
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.OffsetRectangle(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox,System.Single)">
 <summary>
 Offsets the rectangle of the specified linebox by the specified gap,
 and goes deep for rectangles of children in that linebox.
 </summary>
 <param name="lineBox"></param>
 <param name="gap"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.RectanglesReset">
 <summary>
 Resets the <see cref="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.Rectangles"/> array
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.RemoveAnonymousSpaces">
 <summary>
 Removes boxes that are just blank spaces
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.SetBounds(System.Drawing.Rectangle)">
 <summary>
 Sets the bounds of the box
 </summary>
 <param name="r"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.SetBounds(System.Drawing.RectangleF)">
 <summary>
 Sets the bounds of the box
 </summary>
 <param name="rectangle"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.ToString">
 <summary>
 ToString override.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox.UpdateWords">
 <summary>
 Splits the text into words and saves the result
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord">
 <summary>
 Represents a word inside an inline box
 </summary>
 <remarks>
 Because of performance, words of text are the most atomic 
 element in the project. It should be characters, but come on,
 imagine the performance when drawing char by char on the device.
 
 It may change for future versions of the library
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.#ctor(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Drawing.Image)">
 <summary>
 Creates a new BoxWord which represents an image
 </summary>
 <param name="owner"></param>
 <param name="image"></param>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.FullWidth">
 <summary>
 Gets the width of the word including white-spaces
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.Image">
 <summary>
 Gets the image this words represents (if one)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.IsImage">
 <summary>
 Gets if the word represents an image.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.IsSpaces">
 <summary>
 Gets a bool indicating if this word is composed only by spaces.
 Spaces include tabs and line breaks
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.IsLineBreak">
 <summary>
 Gets if the word is composed by only a line break
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.IsTab">
 <summary>
 Gets if the word is composed by only a tab
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.OwnerBox">
 <summary>
 Gets the Box where this word belongs.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.Text">
 <summary>
 Gets the text of the word
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.LastMeasureOffset">
 <summary>
 Gets or sets an offset to be considered in measurements
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.ReplaceLineBreaksAndTabs">
 <summary>
 Removes line breaks and tabs on the text of the word,
 replacing them with white spaces
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.AppendChar(System.Char)">
 <summary>
 Appends the specified char to the word's text
 </summary>
 <param name="c"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord.ToString">
 <summary>
 Represents this word for debugging purposes
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWordSplitter">
 <summary>
 Splits text on words for a box
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWordSplitter.CollapsesWhiteSpaces(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Returns a bool indicating if the specified box white-space processing model specifies
 that sequences of white spaces should be collapsed on a single whitespace
 </summary>
 <param name="b"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWordSplitter.EliminatesLineBreaks(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Returns a bool indicating if line breaks at the source should be eliminated
 </summary>
 <param name="b"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWordSplitter.SplitWords">
 <summary>
 Splits the text on words using rules of the specified box
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants">
 <summary>
 String constants to avoid typing errors.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.Cm">
 <summary>
 Centimeters
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.Mm">
 <summary>
 Milimeters
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.Px">
 <summary>
 Pixels
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.In">
 <summary>
 Inches
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.Em">
 <summary>
 Em - The font size of the relevant font
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.Ex">
 <summary>
 The 'x-height' of the relevan font
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.Pt">
 <summary>
 Points
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssConstants.Pc">
 <summary>
 Picas
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.DefaultStyleSheet">
 <summary>
 CSS Specification's Default Style Sheet for HTML 4
 </summary>
 <remarks>
 http://www.w3.org/TR/CSS21/sample.html
 </remarks>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.ErrorOnImageIcon">
 <summary>
 Html Fragment used to draw the icon that shows an error on an IMG HTML element
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.ErrorOnObjectIcon">
 <summary>
 Html Fragment used to draw the icon that shows an error on an OBJECT HTML element
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.FontSize">
 <summary>
 Default font size in points. Change this value to modify the default font size.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.FontSerif">
 <summary>
 Default font used for the generic 'serif' family
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.FontSansSerif">
 <summary>
 Default font used for the generic 'sans-serif' family
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.FontCursive">
 <summary>
 Default font used for the generic 'cursive' family
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.FontFantasy">
 <summary>
 Default font used for the generic 'fantasy' family
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDefaults.FontMonospace">
 <summary>
 Default font used for the generic 'monospace' family
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper">
 <summary>
 Provides some drawing functionallity
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.Border">
 <summary>
 Border specifiers
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.RoundP(System.Drawing.PointF,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Rounds the specified point
 </summary>
 <param name="p"></param>
 <param name="b"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.RoundR(System.Drawing.RectangleF,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Rounds the specified rectangle
 </summary>
 <param name="b"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.GetBorderPath(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.Border,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Drawing.RectangleF,System.Boolean,System.Boolean)">
 <summary>
 Makes a border path
 </summary>
 <param name="border">Desired border</param>
 <param name="b">Box wich the border corresponds</param>
 <param name="isLineStart">Specifies if the border is for a starting line (no bevel on left)</param>
 <param name="isLineEnd">Specifies if the border is for an ending line (no bevel on right)</param>
 <returns>Beveled border path</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.CreateCorner(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Drawing.RectangleF,System.Int32)">
 <summary>
 Creates the corner to place with the borders
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.GetRoundRect(System.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
 <summary>
 Creates a rounded rectangle using the specified corner radius
 </summary>
 <param name="rect">Rectangle to round</param>
 <param name="nwRadius">Radius of the north east corner</param>
 <param name="neRadius">Radius of the north west corner</param>
 <param name="seRadius">Radius of the south east corner</param>
 <param name="swRadius">Radius of the south west corner</param>
 <returns>GraphicsPath with the lines of the rounded rectangle ready to be painted</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssDrawingHelper.Darken(System.Drawing.Color)">
 <summary>
 Makes the specified color darker
 </summary>
 <param name="c"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine">
 <summary>
 Helps on CSS Layout
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.CreateLineBoxes(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Creates line boxes for the specified blockbox
 </summary>
 <param name="g"></param>
 <param name="blockBox"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.FlowBox(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Single,System.Single,System.Single,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox@,System.Single@,System.Single@,System.Single@)">
 <summary>
 Recursively flows the content of the box using the inline model
 </summary>
 <param name="g">Device Info</param>
 <param name="blockbox">Blockbox that contains the text flow</param>
 <param name="box">Current box to flow its content</param>
 <param name="maxright">Maximum reached right</param>
 <param name="linespacing">Space to use between rows of text</param>
 <param name="startx">x starting coordinate for when breaking lines of text</param>
 <param name="line">Current linebox being used</param>
 <param name="curx">Current x coordinate that will be the left of the next word</param>
 <param name="cury">Current y coordinate that will be the top of the next word</param>
 <param name="maxbottom">Maximum bottom reached so far</param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.BubbleRectangles(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Recursively creates the rectangles of the blockBox, by bubbling from deep to outside of the boxes 
 in the rectangle structure
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.WhiteSpace(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the white space width of the specified box
 </summary>
 <param name="g"></param>
 <param name="b"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyAlignment(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Applies vertical and horizontal alignment to words in lineboxes
 </summary>
 <param name="g"></param>
 <param name="lineBox"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyRightToLeft(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Applies right to left direction to words
 </summary>
 <param name="line"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.GetAscent(System.Drawing.Font)">
 <summary>
 Gets the ascent of the font
 </summary>
 <param name="f"></param>
 <returns></returns>
 <remarks>
 Font metrics from http://msdn.microsoft.com/en-us/library/xwf9s90b(VS.71).aspx
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.GetDescent(System.Drawing.Font)">
 <summary>
 Gets the descent of the font
 </summary>
 <param name="f"></param>
 <returns></returns>
 <remarks>
 Font metrics from http://msdn.microsoft.com/en-us/library/xwf9s90b(VS.71).aspx
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.GetLineSpacing(System.Drawing.Font)">
 <summary>
 Gets the line spacing of the font
 </summary>
 <param name="f"></param>
 <returns></returns>
 <remarks>
 Font metrics from http://msdn.microsoft.com/en-us/library/xwf9s90b(VS.71).aspx
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyVerticalAlignment(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Applies vertical alignment to the linebox
 </summary>
 <param name="g"></param>
 <param name="lineBox"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyCellVerticalAlignment(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Applies special vertical alignment for table-cells
 </summary>
 <param name="g"></param>
 <param name="cell"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyJustifyAlignment(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Applies centered alignment to the text on the linebox
 </summary>
 <param name="g"></param>
 <param name="lineBox"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyCenterAlignment(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Applies centered alignment to the text on the linebox
 </summary>
 <param name="g"></param>
 <param name="line"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyRightAlignment(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Applies right alignment to the text on the linebox
 </summary>
 <param name="g"></param>
 <param name="line"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLayoutEngine.ApplyLeftAlignment(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox)">
 <summary>
 Simplest alignment, just arrange words.
 </summary>
 <param name="g"></param>
 <param name="line"></param>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength">
 <summary>
 Represents and gets info about a CSS Length
 </summary>
 <remarks>
 http://www.w3.org/TR/CSS21/syndata.html#length-units
 </remarks>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.CssUnit">
 <summary>
 Represents the possible units of the CSS lengths
 </summary>
 <remarks>
 http://www.w3.org/TR/CSS21/syndata.html#length-units
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.#ctor(System.String)">
 <summary>
 Creates a new CssLength from a length specified on a CSS style sheet or fragment
 </summary>
 <param name="length">Length as specified in the Style Sheet or style fragment</param>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.Number">
 <summary>
 Gets the number in the length
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.HasError">
 <summary>
 Gets if the length has some parsing error
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.IsPercentage">
 <summary>
 Gets if the length represents a precentage (not actually a length)
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.IsRelative">
 <summary>
 Gets if the length is specified in relative units
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.Unit">
 <summary>
 Gets the unit of the length
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.Length">
 <summary>
 Gets the length as specified in the string
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.ConvertEmToPoints(System.Single)">
 <summary>
 If length is in Ems, returns its value in points
 </summary>
 <param name="emSize">Em size factor to multiply</param>
 <returns>Points size of this em</returns>
 <exception cref="T:System.InvalidOperationException">If length has an error or isn't in ems</exception>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.ConvertEmToPixels(System.Single)">
 <summary>
 If length is in Ems, returns its value in pixels
 </summary>
 <param name="pixelFactor">Pixel size factor to multiply</param>
 <returns>Pixels size of this em</returns>
 <exception cref="T:System.InvalidOperationException">If length has an error or isn't in ems</exception>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLength.ToString">
 <summary>
 Returns the length formatted ready for CSS interpreting.
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox">
 <summary>
 Represents a line of text.
 </summary>
 <remarks>
 To learn more about line-boxes see CSS spec:
 http://www.w3.org/TR/CSS21/visuren.html
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.#ctor(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Creates a new LineBox
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.RelatedBoxes">
 <summary>
 Gets a list of boxes related with the linebox. 
 To know the words of the box inside this linebox, use the <see cref="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.WordsOf(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)"/> method.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.Words">
 <summary>
 Gets the words inside the linebox
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.OwnerBox">
 <summary>
 Gets the owner box
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.Rectangles">
 <summary>
 Gets a List of rectangles that are to be painted on this linebox
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.GetMaxWordBottom">
 <summary>
 Gets the maximum bottom of the words
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.ReportExistanceOf(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBoxWord)">
 <summary>
 Lets the linebox add the word an its box to their lists if necessary.
 </summary>
 <param name="word"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.WordsOf(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Return the words of the specified box that live in this linebox
 </summary>
 <param name="box"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.UpdateRectangle(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Single,System.Single,System.Single,System.Single)">
 <summary>
 Updates the specified rectangle of the specified box.
 </summary>
 <param name="box"></param>
 <param name="x"></param>
 <param name="y"></param>
 <param name="r"></param>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.AssignRectanglesToBoxes">
 <summary>
 Copies the rectangles to their specified box
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.DrawRectangles(System.Drawing.Graphics)">
 <summary>
 Draws the rectangles for debug purposes
 </summary>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.GetBaseLineHeight(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Drawing.Graphics)">
 <summary>
 Gets the baseline Height of the rectangle
 </summary>
 <param name="g"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.SetBaseLine(System.Drawing.Graphics,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Single)">
 <summary>
 Sets the baseline of the words of the specified box to certain height
 </summary>
 <param name="g">Device info</param>
 <param name="b">box to check words</param>
 <param name="baseline">baseline</param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssLineBox.ToString">
 <summary>
 Returns the words of the linebox
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssPropertyAttribute">
 <summary>
 Used to mark a property as a Css property.
 The <see cref="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssPropertyAttribute.Name"/> property is used to specify the oficial CSS name
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssPropertyAttribute.#ctor(System.String)">
 <summary>
 Creates a new CssPropertyAttribute
 </summary>
 <param name="name">Name of the Css property</param>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssPropertyAttribute.Name">
 <summary>
 Gets or sets the name of the CSS property
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Left">
 <summary>
 Left of the rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Top">
 <summary>
 Top of the rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Width">
 <summary>
 Width of the rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Height">
 <summary>
 Height of the rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Right">
 <summary>
 Gets or sets the right of the rectangle. When setting, it only affects the Width of the rectangle.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Bottom">
 <summary>
 Gets or sets the bottom of the rectangle. When setting, it only affects the Height of the rectangle.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Bounds">
 <summary>
 Gets or sets the bounds of the rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Location">
 <summary>
 Gets or sets the location of the rectangle
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssRectangle.Size">
 <summary>
 Gets or sets the size of the rectangle
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.SpacingBox">
 <summary>
 Used to make space on vertical cell combination
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.SpacingBox.StartRow">
 <summary>
 Gets the index of the row where box starts
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.SpacingBox.EndRow">
 <summary>
 Gets the index of the row where box ends
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.WidthSpecified">
 <summary>
 Gets if the user specified a width for the table
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.AllRows">
 <summary>
 Hosts a list of all rows in the table, including those on the TFOOT, THEAD and TBODY
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.Caption">
 <summary>
 Gets the box that represents the caption of this table, if any.
 WARNING: May be null
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.ColumnCount">
 <summary>
 Gets the column count of this table
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.ColumnMinWidths">
 <summary>
 Gets the minimum width of each column
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.Columns">
 <summary>
 Gets the declared Columns on the TABLE tag
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.ColumnWidths">
 <summary>
 Gets an array indicating the withs of each column.
 This must have the same count than <see cref="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.Columns"/>
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.BodyRows">
 <summary>
 Gets the boxes that represents the table-row Boxes of the table, 
 including those inside of the TBODY tags
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.FooterBox">
 <summary>
 Gets the table-footer-group Box
 WARNING: May be null
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.HeaderBox">
 <summary>
 Gets the table-header-group Box
 WARNING: May be null
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.HorizontalSpacing">
 <summary>
 Gets the actual horizontal spacing of the table
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.VerticalSpacing">
 <summary>
 Gets the actual vertical spacing of the table
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.RowCount">
 <summary>
 Gets the row count of this table, including the rows inside the table-row-group,
 table-row-heaer and table-row-footer Boxes
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.TableBox">
 <summary>
 Gets the original table box
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.Analyze(System.Drawing.Graphics)">
 <summary>
 Analyzes the Table and assigns values to this CssTable object.
 To be called from the constructor
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetSpannedMinWidth(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Int32,System.Int32)">
 <summary>
 Gets the spanned width of a cell
 (With of all columns it spans minus one)
 </summary>
 <param name="row"></param>
 <param name="cell"></param>
 <param name="realcolindex"></param>
 <param name="colspan"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetCellRealColumnIndex(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the cell column index checking its position and other cells colspans
 </summary>
 <param name="row"></param>
 <param name="cell"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetCellWidth(System.Int32,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the cells width, taking colspan and being in the specified column
 </summary>
 <param name="column"></param>
 <param name="b"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetColSpan(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the colspan of the specified box
 </summary>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetRowSpan(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the rowspan of the specified box
 </summary>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.Measure(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Drawing.Graphics)">
 <summary>
 Recursively measures the specified box
 </summary>
 <param name="b"></param>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.MeasureWords(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Drawing.Graphics)">
 <summary>
 Recursively measures words inside the box
 </summary>
 <param name="b"></param>
 <param name="g"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetReductableColumns">
 <summary>
 Gets the number of reductable columns
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.CanReduceWidth">
 <summary>
 Tells if the columns widths can be reduced,
 by checking the minimum widths of all cells
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.CanReduceWidth(System.Int32)">
 <summary>
 Tells if the specified column can be reduced,
 by checking its minimum width
 </summary>
 <param name="columnIndex"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetAvailableWidth">
 <summary>
 Gets the available width for the whole table.
 It also sets the value of <see cref="P:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.WidthSpecified"/>
 </summary>
 <returns></returns>
 <remarks>
 The table's width can be larger than the result of this method, because of the minimum 
 size that individual boxes.
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetAvailableCellWidth">
 <summary>
 Gets the width available for cells
 </summary>
 <returns></returns>
 <remarks>
 It takes away the cell-spacing from <see cref="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetAvailableWidth"/>
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetWidthSum">
 <summary>
 Gets the current sum of column widths
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.GetSpan(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Gets the span attribute of the tag of the specified box
 </summary>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssTable.CreateColumn(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Creates the column with the specified width
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.ParseNumber(System.String,System.Single)">
 <summary>
 Evals a number and returns it. If number is a percentage, it will be multiplied by <paramref name="hundredPercent"/>
 </summary>
 <param name="number">Number to be parsed</param>
 <param name="hundredPercent">Number that represents the 100% if parsed number is a percentage</param>
 <returns>Parsed number. Zero if error while parsing.</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.ParseLength(System.String,System.Single,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Parses a length. Lengths are followed by an unit identifier (e.g. 10px, 3.1em)
 </summary>
 <param name="length">Specified length</param>
 <param name="hundredPercent">Equivalent to 100 percent when length is percentage</param>
 <param name="box"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.ParseLength(System.String,System.Single,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.Single,System.Boolean)">
 <summary>
 Parses a length. Lengths are followed by an unit identifier (e.g. 10px, 3.1em)
 </summary>
 <param name="length">Specified length</param>
 <param name="hundredPercent">Equivalent to 100 percent when length is percentage</param>
 <param name="box"></param>
 <param name="returnPoints">Allows the return float to be in points. If false, result will be pixels</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.GetActualColor(System.String)">
 <summary>
 Parses a color value in CSS style; e.g. #ff0000, red, rgb(255,0,0), rgb(100%, 0, 0)
 </summary>
 <param name="colorValue">Specified color value; e.g. #ff0000, red, rgb(255,0,0), rgb(100%, 0, 0)</param>
 <returns>System.Drawing.Color value</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.GetActualBorderWidth(System.String,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Parses a border value in CSS style; e.g. 1px, 1, thin, thick, medium
 </summary>
 <param name="borderValue"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.SplitValues(System.String)">
 <summary>
 Split the value by spaces; e.g. Useful in values like 'padding:5 4 3 inherit'
 </summary>
 <param name="value">Value to be splitted</param>
 <returns>Splitted and trimmed values</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.SplitValues(System.String,System.Char)">
 <summary>
 Split the value by the specified separator; e.g. Useful in values like 'padding:5 4 3 inherit'
 </summary>
 <param name="value">Value to be splitted</param>
 <returns>Splitted and trimmed values</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.GetTypeInfo(System.String,System.String@)">
 <summary>
 Detects the type name in a path. 
 E.g. Gets System.Drawing.Graphics from a path like System.Drawing.Graphics.Clear
 </summary>
 <param name="path"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.DetectSource(System.String)">
 <summary>
 Returns the object specific to the path
 </summary>
 <param name="path"></param>
 <returns>One of the following possible objects: FileInfo, MethodInfo, PropertyInfo</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.GetImage(System.String)">
 <summary>
 Gets the image of the specified path
 </summary>
 <param name="path"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.GetStyleSheet(System.String)">
 <summary>
 Gets the content of the stylesheet specified in the path
 </summary>
 <param name="path"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssValue.GoLink(System.String)">
 <summary>
 Executes the desired action when the user clicks a link
 </summary>
 <param name="href"></param>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlConstants">
 <summary>
 Defines HTML strings
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlRenderer">
 <summary>
 A Professional HTML Renderer You Will Use
 
 > https://www.codeproject.com/Articles/32376/A-Professional-HTML-Renderer-You-Will-Use
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlRenderer.References">
 <summary>
 Gets a list of Assembly references used to search for external references
 </summary>
 <remarks>
 This references are used when loading images and other content, when
 rendering a piece of HTML/CSS
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlRenderer.AddReference(System.Reflection.Assembly)">
 <summary>
 Adds a reference to the References list if not yet listed
 </summary>
 <param name="assembly"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlRenderer.Render(System.Drawing.Graphics,System.String,System.Drawing.PointF,System.Single)">
 <summary>
 Draws the HTML on the specified point using the specified width.
 </summary>
 <param name="g">Device to draw</param>
 <param name="html">HTML source</param>
 <param name="location">Point to start drawing</param>
 <param name="width">Width to fit HTML drawing</param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlRenderer.Render(System.Drawing.Graphics,System.String,System.Drawing.RectangleF,System.Boolean)">
 <summary>
 Renders the specified HTML source on the specified area clipping if specified
 </summary>
 <param name="g">Device to draw</param>
 <param name="html">HTML source</param>
 <param name="area">Area where HTML should be drawn</param>
 <param name="clip">If true, it will only paint on the specified area</param>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.Attributes">
 <summary>
 Gets the dictionary of attributes in the tag
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.TagName">
 <summary>
 Gets the name of this tag
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.IsClosing">
 <summary>
 Gets if the tag is actually a closing tag
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.IsSingle">
 <summary>
 Gets if the tag is single placed; in other words it doesn't need a closing tag; 
 e.g. &lt;br&gt;
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.TranslateLength(System.String)">
 <summary>
 Converts an HTML length into a Css length
 </summary>
 <param name="htmlLength"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.ApplyTableBorder(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.String)">
 <summary>
 Cascades to the TD's the border spacified in the TABLE tag.
 </summary>
 <param name="table"></param>
 <param name="border"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.ApplyTablePadding(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox,System.String)">
 <summary>
 Cascades to the TD's the border spacified in the TABLE tag.
 </summary>
 <param name="table"></param>
 <param name="padding"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.HtmlTag.HasAttribute(System.String)">
 <summary>
 Gets a boolean indicating if the attribute list has the specified attribute
 </summary>
 <param name="attribute"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer">
 <summary>
 HTML rendering
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.LinkRegions">
 <summary>
 Gets the link regions of the container
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.MediaBlocks">
 <summary>
 Gets the blocks of style defined on this structure, separated by media type.
 General blocks are defined under the "all" Key.
 </summary>
 <remarks>
 Normal use of this dictionary will be something like:
 
 MediaBlocks["print"]["strong"].Properties
 
 - Or -
 
 MediaBlocks["all"]["strong"].Properties
 </remarks>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.DocumentSource">
 <summary>
 Gets the document's source
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.AvoidGeometryAntialias">
 <summary>
 Gets or sets a value indicating if antialiasing should be avoided 
 for geometry like backgrounds and borders
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.AvoidTextAntialias">
 <summary>
 Gets or sets a value indicating if antialiasing should be avoided
 for text rendering
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.MaximumSize">
 <summary>
 Gets or sets the maximum size of the container
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.ScrollOffset">
 <summary>
 Gets or sets the scroll offset of the document
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.FeedStyleSheet(System.String)">
 <summary>
 Feeds the source of the stylesheet
 </summary>
 <param name="stylesheet"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.FeedStyleBlock(System.String,System.String)">
 <summary>
 Feeds the style with a block about the specific media.
 When no media is specified, "all" will be used
 </summary>
 <param name="media"></param>
 <param name="block"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.ParseDocument">
 <summary>
 Parses the document
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.FindParent(System.String,Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Recursively searches for the parent with the specified HTML Tag name
 </summary>
 <param name="tagName"></param>
 <param name="b"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.CascadeStyles(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Applies style to all boxes in the tree
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.BlockCorrection(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Makes block boxes be among only block boxes. 
 Inline boxes should live in a pool of Inline boxes only.
 </summary>
 <param name="startBox"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.InitialContainer.BlockCorrection_GetInlineGroups(Microsoft.VisualBasic.MIME.Markup.HTML.CSS.Render.CssBox)">
 <summary>
 Scans the boxes (non-deeply) of the box, and returns groups of contiguous inline boxes.
 </summary>
 <param name="box"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser">
 <summary>
 Collection of regular expressions used when parsing
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssProperties">
 <summary>
 Extracts properties and values from a Css property block; e.g. property:value;
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssComments">
 <summary>
 Extracts CSS style comments; e.g. /* comment */
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssAtRules">
 <summary>
 Extracts CSS at-rules; e.g. @media print { block1{} block2{} }
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssMediaTypes">
 <summary>
 Extracts the media types from a media at-rule; e.g. @media print, 3d, screen {
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssBlocks">
 <summary>
 Extracts defined blocks in CSS. 
 WARNING: Blocks will include blocks inside at-rules.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssNumber">
 <summary>
 Extracts a number; e.g.  5, 6, 7.5, 0.9
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssPercentage">
 <summary>
 Extracts css percentages from the string; e.g. 100% .5% 5.4%
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssLength">
 <summary>
 Extracts CSS lengths; e.g. 9px 3pt .89em
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssColors">
 <summary>
 Extracts CSS colors; e.g. black white #fff #fe98cd rgb(5,5,5) rgb(45%, 0, 0)
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssLineHeight">
 <summary>
 Extracts line-height values (normal, numbers, lengths, percentages)
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssBorderStyle">
 <summary>
 Extracts CSS border styles; e.g. solid none dotted
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssBorderWidth">
 <summary>
 Extracts CSS border widthe; e.g. 1px thin 3em
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssFontFamily">
 <summary>
 Extracts font-family values
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssFontStyle">
 <summary>
 Extracts CSS font-styles; e.g. normal italic oblique
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssFontVariant">
 <summary>
 Extracts CSS font-variant values; e.g. normal, small-caps
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssFontWeight">
 <summary>
 Extracts font-weight values; e.g. normal, bold, bolder...
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssFontSize">
 <summary>
 Exracts font sizes: xx-small, larger, small, 34pt, 30%, 2em
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.CssFontSizeAndLineHeight">
 <summary>
 Gets the font-size[/line-height]? on the font shorthand property.
 Check http://www.w3.org/TR/CSS21/fonts.html#font-shorthand
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.HtmlTag">
 <summary>
 Extracts HTML tags
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.HmlTagAttributes">
 <summary>
 Extracts attributes from a HTML tag; e.g. att=value, att="value"
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.Match(System.String,System.String)">
 <summary>
 Extracts matches from the specified source
 </summary>
 <param name="regex">Regular expression to extract matches</param>
 <param name="source">Source to extract matches</param>
 <returns>Collection of matches</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.Search(System.String,System.String)">
 <summary>
 Searches the specified regex on the source
 </summary>
 <param name="regex"></param>
 <param name="source"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Render.Parser.Search(System.String,System.String,System.Int32@)">
 <summary>
 Searches the specified regex on the source
 </summary>
 <param name="regex"></param>
 <param name="source"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocParserAPI.TextParse(System.String@)">
 <summary>
 解析标签开始和结束的位置之间的内部html文本
 </summary>
 <param name="doc"></param>
 <returns></returns>
 <remarks>这个方法是最开始的解析函数，非递归的</remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocParserAPI.__innerTextParser(System.String@,System.String,System.Boolean@)">
 <summary>
 在得到一个标签之后前面的数据会被扔掉，开始解析标签后面的数据
 </summary>
 <param name="innerText"></param>
 <param name="parent"></param>
 <returns>这个函数是一个递归函数</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.TextAPI.TryParse(System.String,System.Drawing.Font)">
 <summary>
 执行html栈空间解析
 </summary>
 <param name="html"></param>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.Image.Text">
 <summary>
 这个Image对象的原始的html字符串
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Image.ResParser(System.String)">
 <summary>
 
 </summary>
 <param name="img">&lt;img> html标签</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlDocument.LoadDocument(System.String)">
 <summary>
 假设所加载的html文档是完好的格式的，即没有不匹配的标签的
 </summary>
 <param name="url"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlElement">
 <summary>
 一个标签所标记的元素以及内部文本
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlElement.Name">
 <summary>
 标签名
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.HtmlElement.Attributes">
 <summary>
 标签的属性列表
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.InnerPlantText">
 <summary>
 Plant text inner the html.(HTML文档内的纯文本对象)
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Extensions.StripHTMLSafely(System.String)">
 <summary>
 Strip out HTML tags while preserving the basic formatting
 </summary>
 <param name="source"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.Extensions.StripHTMLDirectly(System.String)">
 <summary>
 Strip out HTML tags while preserving the basic formatting
 </summary>
 <param name="source"></param>
 <returns></returns>
 <remarks>http://www.codeproject.com/Articles/11902/Convert-HTML-to-Plain-Text</remarks>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter">
 <summary>
 Module provides some method for text document
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter.HighlightLinks(System.String)">
 <summary>
 High light all of the links in the text document automatically.
 </summary>
 <param name="s">Assuming that the input text is plant text.</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter.HighlightURL(System.String)">
 <summary>
 Highligh links in the text.(将文档里面的url使用html标记出来)
 </summary>
 <param name="s">假设这里面没有任何html标记</param>
 <returns></returns>
 
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.HTML.DocFormatter.HighlightEMail(System.String)">
 <summary>
 Highlights the email address in the text.(将文档里面的电子邮件地址使用html标记出来)
 </summary>
 <param name="s"></param>
 <returns></returns>
 
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.HTML.XmlMeta.CSS">
 <summary>
 Html之中的CSS样式
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.XmlMeta.CSS.type">
 <summary>
 ``text/css``
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.HTML.XmlMeta.CSS.style">
 <summary>
 具体的CSS内容
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.WikiArticles">
 <summary>
 Create short link for https://wikipedia.org
 ex: https://en.wikipedia.org/wiki/Southern_Ontario => en_wiki://Southern_Ontario
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.WikiArticles.Transform(System.String)">
 <summary>
 <see cref="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.ExtensionTransform"/>
 </summary>
 <param name="text"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.ExtensionTransform">
 <summary>
 Replace inline element
 </summary>
 <param name="text"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle">
 <summary>
 Add title to youtube link
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle._links">
 <summary>
 Array of links: videoID/title
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle._apiKey">
 <summary>
 Google api key
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.#ctor(System.String,System.Int32)">
 <summary>
 FiXME: max ids?
 </summary>
 <param name="apiKey"></param>
 <param name="maxLinks"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.GetExtension(System.String,System.Int32)">
 <summary>
 FiXME: max ids?
 </summary>
 <param name="apiKey"></param>
 <param name="maxLinks"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.RequestToGoogleApi(System.String)">
 <summary>
 Get videos titles from youtube API
 More info: https://developers.google.com/youtube/v3/
 </summary>
 <param name="ids"></param>
 <returns>Return null string if request failed</returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.LinkToTitle.ParseApiResponse(System.String)">
 <summary>
 Parse API JSON response
 </summary>
 <param name="res"></param>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML">
 <summary>
 Markdown is a text-to-HTML conversion tool for web writers. 
 Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
 then convert it to structurally valid XHTML (or HTML).
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.#ctor(Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions)">
 <summary>
 Create a new Markdown instance and set the options from the MarkdownOptions object.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DisableHr">
 <summary>
 Disable hr parser
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DisableHeaders">
 <summary>
 Disable header parser
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DisableImages">
 <summary>
 Disable image parser
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.QuoteSingleLine">
 <summary>
 Don't grab next lines
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EmptyElementSuffix">
 <summary>
 use ">" for HTML output, or " />" for XHTML output
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.LinkEmails">
 <summary>
 when false, email addresses will never be auto-linked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.StrictBoldItalic">
 <summary>
 when true, bold and italic require non-word characters on either side  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AsteriskIntraWordEmphasis">
 <summary>
 when true, asterisks may be used for intraword emphasis
 this does nothing if StrictBoldItalic is false
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AutoNewLines">
 <summary>
 when true, RETURN becomes a literal newline  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AutoHyperlink">
 <summary>
 when true, (most) bare plain URLs are auto-hyperlinked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.Transform(System.String)">
 <summary>
 Transforms the provided Markdown-formatted text to HTML;  
 see http://en.wikipedia.org/wiki/Markdown
 (好像这个并不支持代码高亮的格式化)
 </summary>
 <remarks>
 The order in which other subs are called here is
 essential. Link and image substitutions need to happen before
 EscapeSpecialChars(), so that any *'s or _'s in the a
 and img tags get encoded.
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.RunBlockGamut(System.String,System.Boolean,System.Boolean)">
 <summary>
 Perform transformations that form block-level tags like paragraphs, headers, and list items.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.AddExtension(Microsoft.VisualBasic.MIME.Markup.MarkDown.ExtensionTransform)">
 <summary>
 Public <see cref="T:System.Delegate"/> Function ExtensionTransform(text As <see cref="T:System.String"/>) As <see cref="T:System.String"/>
 </summary>
 <param name="ext"></param>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.RunSpanGamut(System.String)">
 <summary>
 Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.__MarkdownTable(System.String)">
 <summary>
 处理markdown table
 </summary>
 <param name="text$"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.FormParagraphs(System.String,System.Boolean,System.Boolean)">
 <summary>
 splits on two or more newlines, to form "paragraphs";    
 each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.GetNestedBracketsPattern">
 <summary>
 Reusable pattern to match balanced [brackets]. See Friedl's 
 "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.GetNestedParensPattern">
 <summary>
 Reusable pattern to match balanced (parens). See Friedl's 
 "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.StripLinkDefinitions(System.String)">
 <summary>
 Strips link definitions from text, stores the URLs and titles in hash references.
 </summary>
 <remarks>
 ^[id]: url "optional title"
 </remarks>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML._blocksHtml">
 <summary>
 compiling this monster regex results in worse performance. trust me.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.pattern">
 <summary>
 First, look for nested blocks, e.g.:
     
     &lt;div>
 	    &lt;div>
 		tags for inner block must be indented.
 		&lt;/div>
 	&lt;/div>

 The outermost tags must start at the left margin for this to match, and
 the inner nested divs must be indented.
 We need to do this before the next, more liberal match, because the next
 match will start at the first ``&lt;div>`` and stop at the first ``&lt;/div>``.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.GetBlockPattern">
 <summary>
 derived pretty much verbatim from PHP Markdown
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.HashHTMLBlocks(System.String)">
 <summary>
 replaces any block-level HTML blocks with hash entries
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoAnchors(System.String)">
 <summary>
 Turn Markdown link shortcuts into HTML anchor tags
 </summary>
 <remarks>
 [link text](url "title") 
 [link text][id] 
 [id] 
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoImages(System.String)">
 <summary>
 Turn Markdown image shortcuts into HTML img tags. 
 </summary>
 <remarks>
 ![alt text][id]
 ![alt text](url "optional title")
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoHeaders(System.String)">
 <summary>
 Turn Markdown headers into HTML header tags
 </summary>
 <remarks>
 Header 1  
 ========  
 
 Header 2  
 --------  
 
 # Header 1  
 ## Header 2  
 ## Header 2 with closing hashes ##  
 ...  
 ###### Header 6  
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoHorizontalRules(System.String)">
 <summary>
 Turn Markdown horizontal rules into HTML hr tags
 </summary>
 <remarks>
 ***  
 * * *  
 ---
 - - -
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoLists(System.String)">
 <summary>
 Turn Markdown lists into HTML ul and ol and li tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.ProcessListItems(System.String,System.String)">
 <summary>
 Process the contents of a single ordered or unordered list, splitting it
 into individual list items.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.SyntaxCodeBloackRegexp">
 <summary>
 带语言类型说明的代码块
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.codeBlockRegexp">
 <summary>
 这里只是解析出4个空格的缩进的代码块
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoCodeBlocks(System.String)">
 <summary>
 Turn Markdown 4-space indented code into HTML pre code blocks
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoCodeSpans(System.String)">
 <summary>
 Turn Markdown `code spans` into HTML code tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoItalicsAndBold(System.String)">
 <summary>
 Turn Markdown *italics* and **bold** into HTML strong and em tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoHardBreaks(System.String)">
 <summary>
 Turn markdown line breaks (two space at end of line) into HTML break tags
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoBlockQuotes(System.String)">
 <summary>
 Turn Markdown > quoted blocks into HTML blockquote blocks
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EMailAddress">
 <summary>
 Email addresses: address@domain.foo
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.DoAutoLinks(System.String)">
 <summary>
 Turn angle-delimited URLs into HTML anchor tags
 </summary>
 <remarks>
 &lt;http://www.example.com&gt;
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EncodeEmailAddress(System.String)">
 <summary>
 encodes email address randomly  
 roughly 10% raw, 45% hex, 45% dec 
 note that @ is always encoded and : never is
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EncodeCode(System.String)">
 <summary>
 Encode/escape certain Markdown characters inside code blocks and spans where they are literals
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EncodeAmpsAndAngles(System.String)">
 <summary>
 Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EscapeBackslashes(System.String)">
 <summary>
 Encodes any escaped characters such as \`, \*, \[ etc
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.Unescape(System.String)">
 <summary>
 swap back in all the special characters we've hidden
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EscapeBoldItalic(System.String)">
 <summary>
 escapes Bold [ * ] and Italic [ _ ] characters
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownHTML.EscapeSpecialCharsWithinTagAttributes(System.String)">
 <summary>
 Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
 don't conflict with their use in Markdown for code, italics and strong. 
 We're replacing each such character with its corresponding hash 
 value; this is likely overkill, but it should prevent us from colliding 
 with the escape values by accident.
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions">
 <summary>
 The markdown document generate options.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AllowEmptyLinkText">
 <summary>
 when true, text link may be empty
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.DisableHr">
 <summary>
 when true, hr parser disabled
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.DisableHeaders">
 <summary>
 when true, header parser disabled
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.DisableImages">
 <summary>
 when true, image parser disabled
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.QuoteSingleLine">
 <summary>
 when true, quote dont grab next lines
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AutoHyperlink">
 <summary>
 when true, (most) bare plain URLs are auto-hyperlinked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AutoNewlines">
 <summary>
 when true, RETURN becomes a literal newline  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.EmptyElementSuffix">
 <summary>
 use ">" for HTML output, or " />" for XHTML output
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.LinkEmails">
 <summary>
 when false, email addresses will never be auto-linked  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.StrictBoldItalic">
 <summary>
 when true, bold and italic require non-word characters on either side  
 WARNING: this is a significant deviation from the markdown spec
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownOptions.AsteriskIntraWordEmphasis">
 <summary>
 when true, asterisks may be used for intraword emphasis
 this does nothing if StrictBoldItalic is false
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper.#cctor">
 <summary>
 In the static constuctor we'll initialize what stays the same across all transforms.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper._tabWidth">
 <summary>
 Tabs are automatically converted to spaces as part of the transform  
 this constant determines how "wide" those tabs become in spaces  
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper.Outdent(System.String)">
 <summary>
 Remove one level of line-leading spaces
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.FormatHelper.handleTrailingParens(System.Text.RegularExpressions.Match)">
 <summary>
 The first group is essentially a negative lookbehind -- if there's a &lt; or a =", we don't touch this.
 We're not using a *real* lookbehind, because of links with in links, like 
 &lt;a href="http://web.archive.org/web/20121130000728/http://www.google.com/">
 With a real lookbehind, the full link would never be matched, and thus the http://www.google.com *would* be matched.
 With the simulated lookbehind, the full link *is* matched (just not handled, because of this early return), causing
 the google link to not be matched again.
 </summary>
 <param name="match"></param>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.MIME.Markup.MarkDown.DocumentHelper._nestDepth">
 <summary>
 maximum nested depth of [] and () supported by the transform; implementation detail
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.DocumentHelper.TokenizeHTML(System.String)">
 <summary>
 returns an array of HTML tokens comprising the input string. Each token is 
 either a tag (possibly with nested, tags contained therein, such 
 as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
 array is a two-element array; the first is either 'tag' or 'text'; the second is 
 the actual value.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.DocumentHelper.Normalize(System.String)">
 <summary>
 convert all tabs to _tabWidth spaces; 
 standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
 makes sure text ends with a couple of newlines; 
 removes any blank lines (only spaces) in the text
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.Block">
 <summary>
 Block-Level Grammar
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser">
 <summary>
 在markdown里面有两张类型的标记语法：
 
 + 一种是和普通的文本混合在一起的
 + 一种是自己占有一整行文本或者一整个文本块的
 
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser.MarkdownParser(System.String)">
 <summary>
 
 </summary>
 <param name="path">The file path to the markdown text document.</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser.SyntaxParser(System.String)">
 <summary>
 
 </summary>
 <param name="md">The markdown file text content, not file path</param>
 <returns></returns>
 <remarks>在这个函数之中只是解析区块的文本数据，段落型的格式则是在另外的一个模块之中解析的</remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.MarkdownParser.IsHeader(System.String,System.String[],System.Int32@)">
 <summary>
 
 </summary>
 <param name="lines"></param>
 <param name="i"></param>
 <returns></returns>
 <remarks></remarks>
 <![CDATA[
 <h3 id = "header" > Headers</h3>

 Markdown supports two styles Of headers, [Setext] [1] And [atx] [2].

 Setext-style headers are "underlined" using equal signs (for first-level
 headers) And dashes (for second-level headers). For example:

     This Is an H1
     =============

     This Is an H2
     -------------

 Any number Of underlining `=`'s or `-`'s will work.

 Atx-style headers use 1-6 hash characters at the start of the line,
 corresponding to header levels 1-6. For example:

     # This Is an H1

     ## This Is an H2

     ###### This Is an H6

 Optionally, you may "close" atx-style headers. This Is purely
 cosmetic -- you can use this if you think it looks better. The
 closing hashes don't even need to match the number of hashes
 used to open the header. (The number of opening hashes
 determines the header level.) 

     # This Is an H1 #
 
     ## This Is an H2 ##

     ### This Is an H3 ######
 ]]>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.MarkDown.Span.LinksParser">
 <summary>
 
 </summary>
 <![CDATA[
 <h2 id="span">Span Elements</h2>
 <h3 id = "link" > Links</h3>

 Markdown supports two style Of links: *inline* And *reference*.

 In both styles, the link text Is delimited by [square brackets].

 To create an inline link, use a set of regular parentheses immediately
 after the link text's closing square bracket. Inside the parentheses,
 put the URL where you want the link To point, along With an *Optional*
 title for the link, surrounded in quotes. For example:

     This Is [an example](http//example.com/ "Title") inline link.

     [This link](http//example.net/) has no title attribute.

 Will produce

     <p> This Is <a href="http://example.com/" title="Title">
     an example</a> inline link.</p>

     <p> <a href = "http://example.net/" > This link</a> has no
     title attribute.</p>

 If you're referring to a local resource on the same server, you can
 use relative paths:

     See my [About](/about/) page For details.   

 Reference-style links use a second set of square brackets, inside
 which you place a label Of your choosing To identify the link:

     This Is [an example][id] reference-style link.

 You can optionally use a space To separate the sets Of brackets:

     This Is [an example] [id] reference-style link.

 Then, anywhere in the document, you define your link label Like this,
 On a line by itself

     [id]: http://example.com/  "Optional Title Here"

 That Is

 *   Square brackets containing the link identifier (optionally
     indented from the left margin Using up To three spaces);
 *   followed by a colon;
 *   followed by one Or more spaces (Or tabs);
 *   followed by the URL for the link;
 *   optionally followed by a title attribute for the link, enclosed
     in double Or single quotes, Or enclosed in parentheses.

 The following three link definitions are equivalent

	 [foo]: http://example.com/  "Optional Title Here"
	 [foo]: http://example.com/  'Optional Title Here'
	 [foo]: http://example.com/  (Optional Title Here)

 **Note** There Is a known bug in Markdown.pl 1.0.1 which prevents
 Single quotes from being used to delimit link titles.

 The link URL may, optionally, be surrounded by angle brackets

     [id]: <http: //example.com/>  "Optional Title Here"

 You can put the title attribute On the Next line And use extra spaces
 Or tabs for padding, which tends to look better with longer URLs

     [id]: http://example.com/longish/path/to/resource/here
         "Optional Title Here"

 Link definitions are only used For creating links during Markdown
 processing, And are stripped from your document in the HTML output.

 Link definition names may consist Of letters, numbers, spaces, And
 punctuation -- but they are *Not* case sensitive. E.g. these two
 links:

	 [link text][a]
	 [link text][A]

 are equivalent.

 The *implicit link name* shortcut allows you to omit the name of the
 link, in which case the link text itself Is used as the name.
 Just use an empty Set Of square brackets -- e.g., To link the word
 "Google" to the google.com web site, you could simply write:

	 [Google][]

 And then define the link

	 [Google]: http://google.com/

 Because link names may contain spaces, this shortcut even works For
 multiple words In the link text:

	 Visit [Daring Fireball][] for more information.

 And then define the link

 	[Daring Fireball] http://daringfireball.net/

 Link definitions can be placed anywhere In your Markdown document. I
 tend to put them immediately after each paragraph in which they're
 used, but if you want, you can put them all at the end of your
 document, sort of Like footnotes.

 Here's an example of reference links in action:

     I get 10 times more traffic from [Google] [1] than from
     [Yahoo] [2] Or [MSN] [3].

       [1] http://google.com/        "Google"
       [2]: http://search.yahoo.com/  "Yahoo Search"
       [3]: http://search.msn.com/    "MSN Search"

 Using the implicit link name shortcut, you could instead write:

     I get 10 times more traffic from [Google][] than from
     [Yahoo][] Or [MSN][].

       [google]: http://google.com/        "Google"
       [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
       [msn]:    http://search.msn.com/    "MSN Search"

 Both of the above examples will produce the following HTML output

     <p> I Get 10 times more traffic from <a href="http://google.com/"
     title="Google">Google</a> than from
     <a href = "http://search.yahoo.com/" title="Yahoo Search">Yahoo</a>
     Or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>

 For comparison, here Is the same paragraph written using
 Markdown's inline link style:

     I get 10 times more traffic from [Google](http//google.com/ "Google")
     than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") Or
     [MSN](http://search.msn.com/ "MSN Search").

 The point Of reference-style links Is Not that they're easier to
 write. The point Is that with reference-style links, your document
 source Is vastly more readable. Compare the above examples: Using
 reference-style links, the paragraph itself Is only 81 characters
 Long; With inline-style links, it's 176 characters; and as raw HTML,
 it's 234 characters. In the raw HTML, there's more markup than there
 Is text.

 With Markdown's reference-style links, a source document much more
 closely resembles the final output, As rendered In a browser. By
 allowing you To move the markup-related metadata out Of the paragraph,
 you can add links without interrupting the narrative flow Of your
 prose.
 ]]>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.MarkDown.Span.LinksParser.InlineLinks(System.String)">
 <summary>
 
 </summary>
 <param name="s"></param>
 <returns></returns>
 <remarks>
 This Is [an example](http//example.com/ "Title") inline link.

 [This link](http//example.net/) has no title attribute.
 </remarks>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.StreamWriter.HTMLWriter.Save(Microsoft.VisualBasic.MIME.Markup.HTML.HtmlDocument,System.String)">
 <summary>
 Saves the html data model into a specific text document
 </summary>
 <param name="doc"></param>
 <param name="SaveTo"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.MIME.Markup.StreamWriter.HTMLWriter.ToString(Microsoft.VisualBasic.MIME.Markup.HTML.HtmlDocument)">
 <summary>
 Generates document string from the html data model.
 </summary>
 <param name="doc"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.PlantText">
 <summary>
 单纯的文本对象
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.MIME.Markup.Markup">
 <summary>
 The markup document(*.html, *.md) its document syntax structure object. 
 </summary>
</member>
</members>
</doc>
