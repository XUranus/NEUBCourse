<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.Data.visualize.Network
</name>
</assembly>
<members>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.PQDijkstraProvider.getInternodeTraversalCost(System.Int32,System.Int32)">
 <summary>
 get costs. If there is no connection, then cost is maximum.(»ñÈ¡)
 </summary>
 <param name="start"></param>
 <param name="finish"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.PQDijkstraProvider.GetNearbyNodes(System.Int32)">
 <summary>
 »ñÈ¡ÓëÄ¿±ê½ÚµãÖ±½ÓÏàÁÚµÄËùÓÐµÄ½ÚµãµÄ±àºÅ
 </summary>
 <param name="startingNode"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.PQDijkstraProvider.#ctor(System.Int32)">
 <summary>
 ÍøÂçÖ®ÖÐµÄ½ÚµãµÄ×ÜÊýÄ¿
 </summary>
 <param name="totalNodes"></param>
 <remarks></remarks>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast">
 <summary> 
 Implements a generalized Dijkstra's algorithm to calculate 
 both minimum distance and minimum path. 
 </summary> 
 <remarks> 
 For this algorithm, all nodes should be provided, and handled 
 in the delegate methods, including the start and finish nodes. 
 </remarks> 
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.NearbyNodesHint">
 <summary> 
 An optional delegate that can help optimize the algorithm 
 by showing it a subset of nodes to consider. Very useful 
 for limited connectivity graphs. (like pixels on a screen!) 
 </summary> 
 <param name="startingNode"> 
 The node that is being traveled away FROM. 
 </param> 
 <returns> 
 An array of nodes that might be reached from the  
 <paramref name="startingNode"/>. 
 </returns> 
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.InternodeTraversalCost">
 <summary> 
 Determines the cost of moving from a given node to another given node. 
 </summary> 
 <param name="start"> 
 The node being moved away from. 
 </param> 
 <param name="finish"> 
 The node that may be moved to. 
 </param> 
 <returns> 
 The cost of the transition from <paramref name="start"/> to 
 <paramref name="finish"/>, or <see cref="F:System.Int32.MaxValue"/> 
 if the transition is impossible (i.e. there is no edge between  
 the two nodes). 
 </returns> 
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.#ctor(System.Int32,Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.InternodeTraversalCost,Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.NearbyNodesHint)">
 <summary> 
 Creates an instance of the <see cref="N:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra"/> class. 
 </summary> 
 <param name="totalNodeCount__1"> 
 The total number of nodes in the graph. 
 </param> 
 <param name="traversalCost__2"> 
 The delegate that can provide the cost of a transition between 
 any two nodes. 
 </param> 
 <param name="hint__3"> 
 An optional delegate that can provide a small subset of nodes 
 that a given node may be connected to. 
 </param> 
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.Results.#ctor(System.Int32[],System.Single[])">
 <summary> 
 Prepares a Dijkstra results package. 
 </summary> 
 <param name="minimumPath__1"> 
 The minimum path array, where each array element index corresponds  
 to a node designation, and the array element value is a pointer to 
 the node that should be used to travel to this one. 
 </param> 
 <param name="minimumDistance__2"> 
 The minimum distance from the starting node to the given node. 
 </param> 
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.Results.MinimumPath">
 The minimum path array, where each array element index corresponds  
 to a node designation, and the array element value is a pointer to 
 the node that should be used to travel to this one. 
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.DijkstraFast.Results.MinimumDistance">
 The minimum distance from the starting node to the given node. 
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.Finder.GetRelativePosition(System.Int32,System.Int32)">
 <summary>
 a function to get relative position from one node to another
 </summary>
 <param name="start"></param>
 <param name="finish"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.BinaryPriorityQueue.Push(System.Object)">
 <summary>
 Push an object onto the PQ
 </summary>
 <param name="O">The new object</param>
 <returns>The index in the list where the object is _now_. This will change when objects are taken from or put onto the PQ.</returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.BinaryPriorityQueue.Pop">
 <summary>
 Get the smallest object and remove it.
 </summary>
 <returns>The smallest object</returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.BinaryPriorityQueue.Update(System.Int32)">
 <summary>
 Notify the PQ that the object at position i has changed
 and the PQ needs to restore order.
 Since you dont have access to any indexes (except by using the
 explicit IList.this) you should not call this function without knowing exactly
 what you do.
 </summary>
 <param name="i">The index of the changed object.</param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.PQDijkstra.BinaryPriorityQueue.Peek">
 <summary>
 Get the smallest object without removing it.
 </summary>
 <returns>The smallest object</returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.DijkstraRouteFind.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.Connection},System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node})">
 <summary>
 
 </summary>
 <param name="Edges">这个是有方向的</param>
 <param name="Nodes"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Dijkstra.DijkstraRouteFind.CalculateMinCost(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node)">
 <summary>
 Calculates the shortest route to all the other locations
 </summary>
 <param name="startPos"></param>
 <returns>List of all locations and their shortest route</returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.BarycentricMethod.doLayout(Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph,System.Int32,System.Drawing.Size)">
 <summary>
 Applies the spring embedder.
 </summary>
 <param name="Network"></param>
 <param name="iterations"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.BarycentricMethod.ForceDirectedLayout(Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph,System.Drawing.Size,System.Double,System.String)">
 <summary>
 
 </summary>
 <param name="Network"></param>
 <param name="cutoff"></param>
 <param name="_DEBUG_EXPORT"></param>
 <returns></returns>
 
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.LayoutUpdater.__layoutGenerator.drawNode(Microsoft.VisualBasic.Data.visualize.Network.Graph.Node,Microsoft.VisualBasic.Data.visualize.Network.Layouts.AbstractVector)">
 <summary>
 在这里更新节点的位置
 </summary>
 <param name="iNode"></param>
 <param name="iPosition"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.Interfaces.IForceDirected.Calculate(System.Single)">
 <summary>
 Calculates the physics updates.
 </summary>
 <param name="iTimeStep"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.Interfaces.IForceDirected.EachNode(Microsoft.VisualBasic.Data.visualize.Network.Layouts.Interfaces.NodeAction)">
 <summary>
 节点的经过计算之后的当前位置可以从这个方法之中获取得到
 </summary>
 <param name="del"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.AbstractRenderer.Draw(System.Single,System.Boolean)">
 <summary>
 
 </summary>
 <param name="iTimeStep"><see cref="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.Interfaces.IForceDirected.Calculate(System.Single)"/></param>
 <param name="physicsUpdate"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Layouts.AbstractRenderer.DirectDraw">
 <summary>
 不计算位置而直接更新绘图
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.Layouts.ForceDirected2D">
 <summary>
 Layout provider engine for the 2D network graphics.
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.Layouts.LayoutPoint">
 <summary>
 The position of the node object in the fdg data model.
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Cytoscape.Edges.Data">
 <summary>
 Dynamics extended data
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Cytoscape.Nodes.Data">
 <summary>
 Dynamics extended data
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network.Links(System.String)">
 <summary>
 获取指定节点的连接数量
 </summary>
 <param name="node"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.GraphAPI">
 <summary>
 Data Model Extensions
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.GraphAPI.Tabular(Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph)">
 <summary>
 将<see cref="T:Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph"/>保存到csv文件之中
 </summary>
 <param name="g"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.GraphAPI.CreateGraph``2(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network{``0,``1})">
 <summary>
 Transform the network data model to graph model
 </summary>
 <typeparam name="TNode"></typeparam>
 <typeparam name="TEdge"></typeparam>
 <param name="net"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.GraphAPI.CytoscapeExportAsGraph(System.String,System.String)">
 <summary>
 Load cytoscape exports as network graph model.
 </summary>
 <param name="edgesDf">``edges.csv``</param>
 <param name="nodesDf">``nodes.csv``</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.GraphAPI.RemovesByDegreeQuantile(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network,System.Double,System.String[]@)">
 <summary>
 默认移除degree少于10% quantile的节点
 </summary>
 <param name="net"></param>
 <param name="quantile#"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.GraphAPI.RemovesByDegree(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network,System.Int32,System.String[]@)">
 <summary>
 直接按照节点的``Degree``来筛选
 </summary>
 <param name="net"></param>
 <param name="degree%">``<see cref="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node"/> -> "Degree"``</param>
 <param name="removeIDs$"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NameOf">
 <summary>
 The names value for edge type <see cref="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge"/> and node type <see cref="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node"/>
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NameOf.REFLECTION_ID_MAPPING_FROM_NODE">
 <summary>
 <see cref="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.FromNode"/>
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NameOf.REFLECTION_ID_MAPPING_TO_NODE">
 <summary>
 <see cref="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.ToNode"/>
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NameOf.REFLECTION_ID_MAPPING_CONFIDENCE">
 <summary>
 <see cref="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.Confidence"/>
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NameOf.REFLECTION_ID_MAPPING_INTERACTION_TYPE">
 <summary>
 <see cref="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.InteractionType"/>
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NameOf.REFLECTION_ID_MAPPING_IDENTIFIER">
 <summary>
 <see cref="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node.ID"/>
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NameOf.REFLECTION_ID_MAPPING_NODETYPE">
 <summary>
 <see cref="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node.NodeType"/>
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge">
 <summary>
 The edge between the two nodes in the network.(节点与节点之间的相互关系)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.#ctor(Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge)">
 <summary>
 Copy value
 </summary>
 <param name="clone"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.GetNullDirectedGuid(System.Boolean)">
 <summary>
 返回没有方向性的统一标识符
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.GetDirectedGuid(System.Boolean)">
 <summary>
 带有方向的互作关系字符串
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.SelfLoop">
 <summary>
 起始节点是否是终止节点
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge.GetConnectedNode(System.String)">
 <summary>
 假若存在连接则返回相对的节点，否则返回空字符串
 </summary>
 <param name="Node"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2">
 <summary>
 The network csv data information with specific type of the datamodel
 </summary>
 <typeparam name="T_Node"></typeparam>
 <typeparam name="T_Edge"></typeparam>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.RemoveDuplicated">
 <summary>
 移除的重复的边
 </summary>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.RemoveSelfLoop">
 <summary>
 移除自身与自身的边
 </summary>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.Save(System.String,System.Text.Encoding)">
 <summary>

 </summary>
 <param name="outDIR">The data directory for the data export, if the value of this directory is null then the data
 will be exported at the current work directory.
 (进行数据导出的文件夹，假若为空则会保存数据至当前的工作文件夹之中)</param>
 <param name="encoding">The file encoding of the exported node and edge csv file.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.op_Addition(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network{`0,`1},System.Collections.Generic.IEnumerable{`0})">
 <summary>

 </summary>
 <param name="net"></param>
 <param name="x">由于会调用ToArray，所以这里建议使用Iterator</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.op_Addition(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network{`0,`1},System.Collections.Generic.IEnumerable{`1})">
 <summary>

 </summary>
 <param name="net"></param>
 <param name="x">由于会调用ToArray，所以这里建议使用Iterator</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.op_Exponent(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network{`0,`1},System.String)">
 <summary>
 Network contains node?
 </summary>
 <param name="net"></param>
 <param name="node"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.op_Exponent(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network{`0,`1},`0)">
 <summary>
 Network contains node?
 </summary>
 <param name="net"></param>
 <param name="node"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.op_Concatenate(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network{`0,`1},System.String)">
 <summary>
 GET node
 </summary>
 <param name="net"></param>
 <param name="node"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network`2.op_LessThanOrEqual(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network{`0,`1},System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Select nodes from the network based on the input identifers <paramref name="nodes"/>
 </summary>
 <param name="net"></param>
 <param name="nodes"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node">
 <summary>
 An node entity in the target network.(这个对象里面包含了网络之中的节点的实体的最基本的定义：节点的标识符以及节点的类型)
 </summary>
 <remarks></remarks>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node.ID">
 <summary>
 这个节点的标识符
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.FileStream.Node.NodeType">
 <summary>
 Node data groups identifier.(这个节点的分组类型的定义)
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph.GetNode(System.String)">
 <summary>
 根据node节点的label来查找
 </summary>
 <param name="label"></param>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph.nodes">
 <summary>
 这个属性与<see cref="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph.connectedNodes"/>属性之间的区别就是这个属性之中还包含着孤立的没有任何连接的节点
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph.connectedNodes">
 <summary>
 Returns the set of all Nodes that have emanating Edges.
 This therefore returns all Nodes that will be visible in the drawing.
 (这个属性之中是没有任何孤立的节点的)
 </summary>
 <returns></returns>
</member>
<member name="F:Microsoft.VisualBasic.Data.visualize.Network.Graph.NetworkGraph.m_nodeSet">
 <summary>
 <see cref="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.Node.ID"/>为键名
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.NodeData.Color">
 <summary>
 颜色<see cref="T:System.Drawing.SolidBrush"/>或者绘图<see cref="T:System.Drawing.TextureBrush"/>
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.NodeData.Neighbours">
 <summary>
 与本节点相连接的其他节点的<see cref="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.Node.ID">编号</see>
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Graph.Node.#ctor(System.String,Microsoft.VisualBasic.Data.visualize.Network.Graph.NodeData)">
 <summary>
 在这里是用的是unique id进行初始化，对于Display title则可以在<see cref="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.GraphData.label"/>属性上面设置
 </summary>
 <param name="iId"></param>
 <param name="iData"></param>
</member>
<member name="P:Microsoft.VisualBasic.Data.visualize.Network.Graph.Node.ID">
 <summary>
 The unique id of this node
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.Abstract.INode">
 <summary>
 Node model in the network
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Abstract.Extensions.RemoveDuplicated``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
 <summary>
 移除的重复的边
 </summary>
 <remarks></remarks>
 <param name="directed">是否忽略方向？</param>
 <param name="ignoreTypes">是否忽略边的类型？</param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.Abstract.Extensions.RemoveSelfLoop``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 移除自身与自身的边
 </summary>
 <remarks></remarks>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.NetworkAPI.GetConnections(System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge},System.String)">
 <summary>
 这个查找函数是忽略掉了方向了的
 </summary>
 <param name="source"></param>
 <param name="node"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.NetworkAPI.GetNextConnects(System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge},System.String)">
 <summary>
 查找To关系的节点边
 </summary>
 <param name="source"></param>
 <param name="from"></param>
 <returns></returns>
 
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.NetworkAPI.FromCorrelations(System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.Data.csv.IO.DataSet},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Double,System.Boolean)">
 <summary>
 变量的属性里面必须是包含有相关度的
 </summary>
 <param name="data"></param>
 <param name="cut"><see cref="M:System.Math.Abs(System.Double)"/></param>
 <param name="trim">Removes the duplicated edges and self loops?</param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.PathFinder`1">
 <summary>
 这个似乎是有方向的
 </summary>
 <typeparam name="NetworkNode"></typeparam>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.PathFinder`1.MoveNextStep(`0,System.Collections.Generic.List{`0},System.String,System.String)">
 <summary>
 进行递归查询
 </summary>
 <param name="Node"></param>
 <param name="ends"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.GraphMatrix">
 <summary>
 可以用来构建<see cref="T:Microsoft.VisualBasic.Data.visualize.Network.PageRank"/>计算所需要的index矩阵
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.GraphMatrix.#ctor(Microsoft.VisualBasic.Data.visualize.Network.FileStream.Network,System.Boolean)">
 <summary>
 
 </summary>
 <param name="net"></param>
 <param name="skipCount">
 对于文本处理的时候，textrank的这部分数据可能会比较有用，这个时候这里可以设置为False.
 </param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.GraphMatrix.Save(System.String)">
 <summary>
 Save network
 </summary>
 <param name="DIR$"></param>
</member>
<member name="T:Microsoft.VisualBasic.Data.visualize.Network.PageRank">
 <summary>
 https://github.com/jeffersonhwang/pagerank
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.PageRank.#ctor(System.Collections.Generic.List{System.Int32}[],System.Double,System.Double,System.Int32)">
 <summary>
 ``outGoingLinks(i)`` contains the indices of the pages pointed to by page i.
 (每一行都是指向第i行的页面的index值的集合)
 </summary>
 <param name="linkMatrix"><see cref="T:Microsoft.VisualBasic.Data.visualize.Network.GraphMatrix"/></param>
 <param name="alpha"></param>
 <param name="convergence"></param>
 <param name="checkSteps"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.PageRank.ComputePageRank">
 <summary>
 Convenience wrap for the link matrix transpose and the generator.
 See <see cref="M:Microsoft.VisualBasic.Data.visualize.Network.PageRank.PageRankGenerator(System.Collections.Generic.List{System.Int32}[],Microsoft.VisualBasic.Mathematical.LinearAlgebra.Vector,System.Collections.Generic.List{System.Int32},System.Double,System.Double,System.Int32)"/> method for parameter descriptions
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.PageRank.TransposeLinkMatrix(System.Collections.Generic.List{System.Int32}[])">
 <summary>
 Transposes the link matrix which contains the links from each page. 
 Returns a Tuple of:  
 
 + 1) pages pointing to a given page, 
 + 2) how many links each page contains, and
 + 3) which pages contain no links at all. 
 
 We want to know is which pages
 </summary>
 <param name="outGoingLinks">``outGoingLinks(i)`` contains the indices of the pages pointed to by page i</param>
 <returns>A tuple of (incomingLinks, numOutGoingLinks, leafNodes)</returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.PageRank.PageRankGenerator(System.Collections.Generic.List{System.Int32}[],Microsoft.VisualBasic.Mathematical.LinearAlgebra.Vector,System.Collections.Generic.List{System.Int32},System.Double,System.Double,System.Int32)">
 <summary>
 Computes an approximate page rank vector of N pages to within some convergence factor.
 </summary>
 <param name="at">At a sparse square matrix with N rows. At[i] contains the indices of pages jj linking to i</param>
 <param name="leafNodes">contains the indices of pages without links</param>
 <param name="numLinks">iNumLinks[i] is the number of links going out from i.</param>
 <param name="alpha">a value between 0 and 1. Determines the relative importance of "stochastic" links.</param>
 <param name="convergence">a relative convergence criterion. Smaller means better, but more expensive.</param>
 <param name="checkSteps">check for convergence after so many steps</param>
</member>
<member name="M:Microsoft.VisualBasic.Data.visualize.Network.TreeAPI.Operations.ClusterParts(System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.Data.visualize.Network.FileStream.NetworkEdge})">
 <summary>
 {最开始的节点，实体列表}
 </summary>
 <param name="net"></param>
 <returns></returns>
</member>
</members>
</doc>
