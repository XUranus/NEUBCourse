<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.Data.IO.SearchEngine
</name>
</assembly>
<members>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.IO.SearchEngine.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.IO.SearchEngine.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.IO.SearchEngine.Text.Text">
 <summary>
 The string value.
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.AssertionProvider">
 <summary>
 提供对字符串的计算方法
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.AssertionProvider.MustContains(Microsoft.VisualBasic.Scripting.TokenIcer.Token{Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens},System.Boolean)">
 <summary>
 
 </summary>
 <param name="t"></param>
 <returns></returns>
 <remarks>得分最高</remarks>
</member>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.Match">
 <summary>
 匹配结果
 </summary>
 
</member>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.IAssertion">
 <summary>
 调用这个方法计算出匹配结果
 </summary>
 <param name="def">数据定义缓存</param>
 <param name="obj">数据实体</param>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.IO.SearchEngine.QueryArgument.Expression">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks>
 Example: 
 
 ```
 #\d+
 #\d+ AND Name:'#\s{3,}' TOP 100
 value:'#[a-zA-Z]{5,}' LIMIT 10
 ```
 </remarks>
</member>
<member name="P:Microsoft.VisualBasic.Data.IO.SearchEngine.QueryArgument.Data">
 <summary>
 The additional extension data.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.IComparer.Match(System.String,System.String)">
 <summary>
 Does the text data can be matched by the query expression?
 </summary>
 <param name="text$"></param>
 <param name="query$"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.IComparer.FindAll(System.String,System.Object)">
 <summary>
 All of the world tokens in the input <paramref name="query"/> should match in one of the fileds in target object.
 </summary>
 <param name="query$"></param>
 <param name="x"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.IComparer.MatchAll(System.String,System.Object)">
 <summary>
 All of the world tokens in the input <paramref name="query"/> should match in any fields in target object.
 </summary>
 <param name="query$"></param>
 <param name="x"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.DataEnumerator.Limit``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Int32,Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens,System.Boolean,System.Boolean)">
 <summary>
 直接取出前n个
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
 <param name="query$"></param>
 <param name="n%"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.DataEnumerator.Top``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Int32,Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens,System.Boolean,System.Boolean)">
 <summary>
 排序之后取得分最高的前n个
 </summary>
 <typeparam name="T"></typeparam>
 <param name="source"></param>
 <param name="query$"></param>
 <param name="n%"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.DataEnumerator.Execute``1(System.Collections.Generic.IEnumerable{``0},System.String,Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens,System.Boolean,System.Boolean)">
 <summary>
 这个函数可以接受``LIMIT``和``TOP``参数
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.MetaExpression">
 <summary>
 ``&lt;expr> &lt;opr>``，假如是以NOT操作符起始的元表达式，则<see cref="P:Microsoft.VisualBasic.Data.IO.SearchEngine.MetaExpression.Expression"/>属性为空
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.IO.SearchEngine.MetaExpression.Expression">
 <summary>
 Public <see cref="T:System.Delegate"/> Function <see cref="T:Microsoft.VisualBasic.Data.IO.SearchEngine.IAssertion"/>(data As <see cref="T:Microsoft.VisualBasic.Data.IO.SearchEngine.IObject"/>) As <see cref="T:System.Boolean"/>.
 (这个可能是包含有括号运算的表达式)
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.IObject.#ctor(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 这个接口是针对字典类型的对象而准备的
 </summary>
 <param name="keys"></param>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.IObject.EnumerateFields(System.Object)">
 <summary>
 返回: ``FiledName: value_string``
 </summary>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.ExpressionBuilder">
 <summary>
 只是构建出对单个对象的查询计算的表达式，进行整个数据集查询的LIMIT和TOP关键词将不会在这里被处理
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.ExpressionBuilder.Build(System.String,Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens,System.Boolean,System.Boolean)">
 <summary>
 构建查询表达式的对象模型
 </summary>
 <param name="query$"></param>
 <param name="anyDefault">
 If all of the tokens in <paramref name="query$"/> expression is type <see cref="F:Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens.AnyTerm"/>, 
 then this parameter will be enable to decided that the relationship between these tokens is 
 <see cref="F:Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens.op_AND"/> for all should match or <see cref="F:Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens.op_OR"/> for any match?
 (请注意，这个参数值只允许<see cref="F:Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens.op_AND"/>或者<see cref="F:Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens.op_OR"/>)
 </param>
 <param name="caseSensitive">计算字符串值的时候是否大小写敏感？</param>
 <param name="allowInStr">是否允许只匹配上部分字符串</param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.Expression">
 <summary>
 The query expression
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.Expression.Match(System.String)">
 <summary>
 Does this expression model in the target input <paramref name="text"/> have a match?
 </summary>
 <param name="text">The text data that using for data search.</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.Expression.Evaluate(Microsoft.VisualBasic.Data.IO.SearchEngine.IObject,System.Object,System.Collections.Generic.IEnumerable{Microsoft.VisualBasic.Data.IO.SearchEngine.MetaExpression},Microsoft.VisualBasic.Data.IO.SearchEngine.Match@)">
 <summary>
 逻辑运算都是从左往右计算的
 </summary>
 <param name="def"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.IO.SearchEngine.Evaluator">
 <summary>
 进行字符串计算的具体过程
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.Evaluator.ContainsAny(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 大小写敏感，在使用之前要先用tolower或者toupper
 </summary>
 <param name="term$"></param>
 <param name="searchIn$"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.Evaluator.MustxContains(System.String,System.String,System.Boolean)">
 <summary>
 假若是一个单词，则要整个单词都相等才行，假若为组合词，则直接匹配
 </summary>
 <param name="term$"></param>
 <param name="searchIn$"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.IsOptr(Microsoft.VisualBasic.Language.List{System.Char},Microsoft.VisualBasic.Data.IO.SearchEngine.SyntaxParser.Tokens@)">
 <summary>
 判断当前的栈是否是在提取操作符
 </summary>
 <param name="tmp"></param>
 <returns></returns>
</member>
</members>
</doc>
